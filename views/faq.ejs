<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>FAQ | Skill Up</title>
  <link rel="stylesheet" href="/css/styles.css">

  <style>
    /* page background */
body {
  background: linear-gradient(135deg, #eef3ff 0%, #dfe8ff 100%);
}

  /* Page-specific FAQ styles */
  .faq-search  {
    width: 60%;
    max-width: 420px;
    padding: .6rem;
    margin-bottom: 1rem;
  }

  .faq-list   {
    max-height: 450px;
    overflow-y: auto;
    padding: 0;
    list-style: none;
    display: flex;
    flex-direction: column;
    align-items: center;          /* centres cards horizontally */
    gap: 0.75rem;
  }

  .faq-item   {
    width: 80%;
    max-width: 600px;
    padding: 1rem;
    background: var(--brand);     /* navy blue from :root */
    color: var(--text-light);     /* white */
    border-radius: .5rem;
    cursor: pointer;
    transition: transform .15s ease;
  }
  .faq-item:hover   { transform: translateY(-2px); }
  .faq-question     { font-size: 1.1rem; font-weight: 600; }
  .faq-answer       { display: none; margin-top: .5rem; font-weight: 400; }
  .faq-item.open .faq-answer { display: block; }

  .add-form { margin-top: 2.5rem; }
</style>

</head>

<body>
  <%- include('partials/header') %>

  <main class="page faq">
    <h2>Frequently Asked Questions</h2>

    <!-- Search bar -->
    <input class="faq-search" type="search" placeholder="Type a keyword…">

    <!-- Scrollable list of questions -->
    <ul class="faq-list">
      <% faqs.forEach(f => { %>
        <li class="faq-item" data-id="<%= f.id %>">
          <span class="faq-question"><%= f.question %></span>
          <div class="faq-answer"><%= f.answer || 'No answer yet.' %></div>
        </li>
      <% }) %>
    </ul>

    <!-- Add-question form -->
    <section class="add-form">
      <h3>Add a Question</h3>
      <form id="addQuestionForm">
        <input type="text" name="question" placeholder="Your question…" required style="width:60%;max-width:420px;padding:.5rem">
        <button type="submit">Submit</button>
      </form>
      <p id="addStatus"></p>
    </section>
  </main>

  <!-- Client JS: toggle answers (search & AJAX next step) -->
  <script>
    // attach toggle to server-rendered items
document.querySelectorAll('.faq-item').forEach(li => {
  li.addEventListener('click', () => li.classList.toggle('open'));
});

/* ------- helpers ------- */
const listEl   = document.querySelector('.faq-list');
const searchEl = document.querySelector('.faq-search');
const formEl   = document.getElementById('addQuestionForm');
const statusEl = document.getElementById('addStatus');

/* render one FAQ <li> (returns the element) */
function createFaqItem(faq) {
  const li = document.createElement('li');
  li.className = 'faq-item';
  li.dataset.id = faq.id;

  li.innerHTML = `
    <span class="faq-question">${faq.question}</span>
    <div class="faq-answer">${faq.answer || 'No answer yet.'}</div>
  `;

  li.addEventListener('click', () => li.classList.toggle('open'));
  return li;
}

/* repaint list with given array */
function renderFaqList(faqs) {
  listEl.innerHTML = '';
  faqs.forEach(f => listEl.appendChild(createFaqItem(f)));
}

/* ------- live search ------- */
let lastController = null;   // abort prev fetch if user types fast

searchEl.addEventListener('input', async e => {
  const q = e.target.value.trim();

  if (lastController) lastController.abort();
  lastController = new AbortController();

  try {
    const res = await fetch(`/api/faqs?q=${encodeURIComponent(q)}`, {
      signal: lastController.signal
    });
    if (!res.ok) throw new Error('Failed search');
    const data = await res.json();
    renderFaqList(data);
  } catch (_) {
    /* silently ignore aborts / errors */
  }
});

/* ------- add-question form (AJAX) ------- */
formEl.addEventListener('submit', async e => {
  e.preventDefault();
  const question = formEl.question.value.trim();
  if (!question) return;

  try {
    const res = await fetch('/api/faqs', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ question })
    });
    if (!res.ok) throw new Error('Bad response');
    const newFaq = await res.json();

    // prepend new question to the list
    listEl.prepend(createFaqItem(newFaq));
    statusEl.textContent = 'Question added!';
    statusEl.style.color = 'limegreen';
    formEl.reset();
  } catch (err) {
    statusEl.textContent = 'Could not add question.';
    statusEl.style.color = 'crimson';
  }
});
</script>

</body>
</html>
